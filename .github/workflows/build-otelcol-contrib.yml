name: Build OpenTelemetry Collector Contrib

on:
  workflow_dispatch:
    inputs:
      architectures:
        description: 'Architectures to build (comma-separated)'
        required: true
        # default: 'amd64,arm64'
        default: 'amd64'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        cache: true

    - name: Set lowercase owner
      id: lowercase
      run: |
        echo "owner=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Set architectures
      id: set-archs
      run: |
        # Default to amd64,arm64 if not specified through workflow_dispatch
        ARCHS="${{ github.event.inputs.architectures || 'amd64,arm64' }}"
        echo "archs=$ARCHS" >> $GITHUB_OUTPUT
        echo "platforms=$(echo $ARCHS | sed 's/,/,linux\//g' | sed 's/^/linux\//')" >> $GITHUB_OUTPUT
        echo "Building for architectures: $ARCHS"
        echo "Docker platforms: $(echo $ARCHS | sed 's/,/,linux\//g' | sed 's/^/linux\//')"

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ steps.lowercase.outputs.owner }}/otelcontribcol
        tags: |
          type=sha,format=long
          type=ref,event=branch
          type=ref,event=tag
          latest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build OpenTelemetry Collector Contrib
      run: |
        # Loop through each architecture and build
        for arch in $(echo "${{ steps.set-archs.outputs.archs }}" | tr ',' ' '); do
          echo "Building for $arch..."
          GOOS=linux GOARCH=$arch COMPONENT=otelcontribcol make otelcontribcol
        done

    - name: Prepare Docker build context
      run: |
        # Loop through each architecture and copy the binaries
        for arch in $(echo "${{ steps.set-archs.outputs.archs }}" | tr ',' ' '); do
          echo "Copying binary for $arch..."
          cp ./bin/otelcontribcol_linux_$arch ./cmd/otelcontribcol/otelcontribcol_$arch
        done

    - name: Build and push Docker image with Buildx
      id: push
      uses: docker/build-push-action@v4
      with:
        context: ./cmd/otelcontribcol
        push: true
        platforms: ${{ steps.set-archs.outputs.platforms }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=ghcr.io/${{ steps.lowercase.outputs.owner }}/otelcontribcol:buildcache
        cache-to: type=registry,ref=ghcr.io/${{ steps.lowercase.outputs.owner }}/otelcontribcol:buildcache,mode=max